repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "Forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "Nucleus"
        url = "https://repo.drnaylor.co.uk/artifactory/list/minecraft"
    }
    maven {
        name = "QuickStart"
        url = "https://repo.drnaylor.co.uk/artifactory/list/quickstart"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public"
    }
    ivy {
        name = 'Pixelmon Reforged'
        url "https://download.nodecdn.net/containers/reforged/server/release"
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact "[revision]/[artifact].[ext]"
        }
    }
}

applyPlugin('org.cadixdev.licenser')
applyPlugin('net.minecraftforge.gradle')
applyPlugin('net.kyori.blossom')

version = "$minecraft_version-$project_major.$project_minor-Forge-$project_suffix" as Object

blossom {
    replaceToken("@version@", "$project_major.$project_minor")
    replaceToken("@description@", "$project_description")
    replaceToken("@id@", "$project_id")
    replaceToken("@name@", "$project_name")
    replaceToken("@organization@", "$project_organization")
    replaceToken("@authors@", "$project_authors")
    replaceToken("@url@", "$project_url")
}

java {
    archivesBaseName = 'NyxEffect'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: "$mappings_channel", version: "$mappings_version"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            
            mods {
                testforgestable {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                testforgestable {
                    source sourceSets.main
                }
            }
        }
    }
}

license {
    header = file('../HEADER.txt')
    newLine = true
    ext {
        name = "$project_name"
        organization = "$project_organization"
        url = "$project_url"
    }
    include '**/*.java'
    include '**/*.groovy'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft "net.minecraftforge:forge:$forgeVersion"

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    compileOnly "pixelmon:Pixelmon-1.12.2-$pixelmonVersion-server:$pixelmonVersion"

    compileOnly fileTree(dir: '../../NyxCore/nyxcore-forge/build/libs', include: '*.jar')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "$project_id",
                "Specification-Vendor"    : "$project_authors",
                "Specification-Version"   : "$project_major.$project_minor",
                "Implementation-Title"    : rootProject.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "$project_authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    inputs.property "version", "$project_major.$project_minor"
    inputs.property "mcversion", "$minecraft_version"
    inputs.property "modid", "$project_id"
    inputs.property "name", "$project_name"
    inputs.property "description", "$project_description"
    inputs.property "url", "$project_url"

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand 'version': "$project_major.$project_minor", 'mcversion': "$minecraft_version"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    from '../LICENSE.txt'

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

void applyPlugin(String PluginId) {
    if (project.getPlugins().hasPlugin(PluginId)) {
        project.logger.log(LogLevel.WARN, "Plugin ${PluginId} already applied")
    } else {
        apply plugin: PluginId
    }
}

task copyJar(type: Copy) {
    def dir = new File('C:/Minecraft/Servers/Forge/mods')
    if(dir.exists()) {
        from jar.archiveFile
        into "${dir}"
        project.logger.log(LogLevel.WARN, "Copied file: ${jar.archiveFile}")
    }else {
        project.logger.log(LogLevel.WARN, "Destination Dir: ${dir} Doesn't exists!!")
    }
}


jar.finalizedBy('reobfJar')

build.finalizedBy('copyJar')